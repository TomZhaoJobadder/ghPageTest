{"highlightCode":"<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> OnInit <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NzTreeNodeOptions <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'ng-zorro-antd/tree'</span><span class=\"token punctuation\">;</span>\r\n\r\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'nz-demo-tree-virtual-scroll'</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token template-string\">template: <span class=\"token html\">` <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nz-tree</span> <span class=\"token attr-name\">[nzData]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>nodes<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">nzBlockNode</span> <span class=\"token attr-name\">nzVirtualHeight</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>300px<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nz-tree</span><span class=\"token punctuation\">></span></span> `</span></span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NzDemoTreeVirtualScrollComponent</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OnInit</span> <span class=\"token punctuation\">{</span>\r\n  nodes<span class=\"token punctuation\">:</span> NzTreeNodeOptions<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token function\">ngOnInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> dig <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>path <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> level <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> NzTreeNodeOptions<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> `$<span class=\"token punctuation\">{</span>path<span class=\"token punctuation\">}</span><span class=\"token operator\">-</span>$<span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">}</span>`<span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">const</span> treeNode<span class=\"token punctuation\">:</span> NzTreeNodeOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n          title<span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">,</span>\r\n          key<span class=\"token punctuation\">,</span>\r\n          expanded<span class=\"token punctuation\">:</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\r\n          children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n          isLeaf<span class=\"token punctuation\">:</span> <span class=\"token keyword\">false</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>level <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n          treeNode<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token function\">dig</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> level <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n          treeNode<span class=\"token punctuation\">.</span>isLeaf <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>treeNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n      <span class=\"token punctuation\">}</span>\r\n      <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">=</span> <span class=\"token function\">dig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n","rawCode":"import { Component, OnInit } from '@angular/core';\r\n\r\nimport { NzTreeNodeOptions } from 'ng-zorro-antd/tree';\r\n\r\n@Component({\r\n  selector: 'nz-demo-tree-virtual-scroll',\r\n  template: ` <nz-tree [nzData]=\"nodes\" nzBlockNode nzVirtualHeight=\"300px\"></nz-tree> `\r\n})\r\nexport class NzDemoTreeVirtualScrollComponent implements OnInit {\r\n  nodes: NzTreeNodeOptions[] = [];\r\n  ngOnInit(): void {\r\n    const dig = (path = '0', level = 3): NzTreeNodeOptions[] => {\r\n      const list = [];\r\n      for (let i = 0; i < 10; i += 1) {\r\n        const key = `${path}-${i}`;\r\n        const treeNode: NzTreeNodeOptions = {\r\n          title: key,\r\n          key,\r\n          expanded: true,\r\n          children: [],\r\n          isLeaf: false\r\n        };\r\n\r\n        if (level > 0) {\r\n          treeNode.children = dig(key, level - 1);\r\n        } else {\r\n          treeNode.isLeaf = true;\r\n        }\r\n\r\n        list.push(treeNode);\r\n      }\r\n      return list;\r\n    };\r\n\r\n    this.nodes = dig();\r\n  }\r\n}\r\n"}
